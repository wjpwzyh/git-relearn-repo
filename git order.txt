win系统下更新git  命令行 	        git update-git-for-windows
git查看版本号                       git --version
工作区提交暂存区			        git add 文件名/*.文件类型/git add .全提交
config设置                         git config --global user.name/user.email
config保存用户名和密码              git config --global credential.helper store
config设置查看                      git config --list
新建版本库/本地仓库                 git init (产生.git隐藏文件/绿色图标表示存在git管理)  git init my-repo //创造git管理的文件夹
从远程仓库创建本地仓库               git clone + 网址
查看仓库状态                        git status  -s 缩写 简洁 ??表示暂存区版本库均未提交 M--已编辑未提交
暂存区提交本地仓库                  git commit -m "xxx" /git commit ----进入交互区vim 输入提交信息/-a 参数设置修改文件后不需要执行 git add 命令，直接来提交
查看提交记录                        git log --oneline(simple show)
回退版本                            git reset --soft(工作区暂存区全保存) --hard(工作区暂存区全舍弃)  --mixed(工作区保存暂存区舍弃)+版本号
                                    soft/mixed 主要用于版本合并提交 soft直接commit mixed需重新add      hard 主要用于放弃所有修改
版本误操作                          git reflog 查看所有版本号  git reset --hard xxxxx回退到指定版本
版本库差异对比                      git diff --比较暂存区和工作区/git diff HEAD --比较版本库和工作区/git diff --cached --比较版本库和暂存区
特定版本差异对比                    git diff xxx xxx 版本号/分支名 git diff HEAD~/^ HEAD + 文件名 --只比较单文件
版本库删除文件                      rm xxx--git add--git commit/   git rm xxx ---同时在工作区和暂存区删除，仍需要提交版本库
                                    git rm --cached xxx-----仅删除暂存区文件/git rm -r* 递归删除某个目录下所有文件-r*
查看暂存区文件                      git ls-files
克隆远程仓库                        git clone +https/ssh xxx
远程仓库修改同步到本地              git pull <remote> <branch>
本地仓库修改同步到远程              git push <remote>
添加远程仓库                        git remote add <shortname><url>   可添加对应多个平台的远程仓库
查看当前仓库对应的远程仓库的别名和地址git remote -v             --对应origin
指定分支的名称为main                git branch -M main
本地与远程origin的main相关联        git push -u origin main:main    -u是upstream的缩写 关联   main:main  本地:远程 需要配置ssh密钥无法通过密码HTTPS
拉取远程仓库内容                    git pull <远程仓库名> <远程分支名>:<本地分支名>   git pull origin main----origin main省略默认main ---分支名相同和省略后边
查看所有分支内容                    git branch   + xxx 创建新的分支内容
切换到不同的分支                    git checkout xxx            // git switch 专门用于切换分支
分支合并提交                        git merge xxx 分支名